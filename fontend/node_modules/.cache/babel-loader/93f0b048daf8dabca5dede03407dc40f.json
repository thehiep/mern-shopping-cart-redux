{"ast":null,"code":"import * as actionTypes from '../constants/cartConstants';\nexport const cartReducer = (state = {\n  cartItems: [],\n  subTotal: 0\n}, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      {\n        const item = action.payload;\n        const existItem = state.cartItems.find(x => x.product === item.product);\n        const cartItems = state.cartItems.map(x => x.product === existItem.product ? item : x);\n\n        if (existItem) {\n          return { ...state,\n            cartItems: cartItems,\n            subTotal: cartItems.reduce((total, item) => total += item.price * item.qty, 0)\n          };\n        } else {\n          return { ...state,\n            cartItems: [...state.cartItems, item]\n          };\n        }\n      }\n\n    case actionTypes.REMOVE_FROM_CART:\n      {\n        const cartItems = state.cartItems.filter(x => x.product !== action.payload);\n        return { ...state,\n          cartItems: cartItems,\n          subTotal: cartItems.reduce((total, item) => total += item.price * item.qty, 0)\n        };\n      }\n\n    case actionTypes.CART_RESET:\n      return { ...state,\n        cartItems: [],\n        subTotal: 0\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/mb050/Desktop/tutorial/mern-shopping-yt-build/fontend/src/redux/reducers/cartReducers.js"],"names":["actionTypes","cartReducer","state","cartItems","subTotal","action","type","ADD_TO_CART","item","payload","existItem","find","x","product","map","reduce","total","price","qty","REMOVE_FROM_CART","filter","CART_RESET"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,4BAA7B;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE,EAAb;AAAiBC,EAAAA,QAAQ,EAAE;AAA3B,CAAT,EAAyCC,MAAzC,KAAoD;AAC3E,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,WAAW,CAACO,WAAjB;AAA8B;AAC1B,cAAMC,IAAI,GAAGH,MAAM,CAACI,OAApB;AACA,cAAMC,SAAS,GAAGR,KAAK,CAACC,SAAN,CAAgBQ,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA7C,CAAlB;AACA,cAAMV,SAAS,GAAGD,KAAK,CAACC,SAAN,CAAgBW,GAAhB,CAAoBF,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCL,IAAlC,GAAyCI,CAAlE,CAAlB;;AACA,YAAIF,SAAJ,EAAe;AACX,iBAAO,EACH,GAAGR,KADA;AAEHC,YAAAA,SAAS,EAAEA,SAFR;AAGHC,YAAAA,QAAQ,EAAED,SAAS,CAACY,MAAV,CAAiB,CAACC,KAAD,EAAQR,IAAR,KAAiBQ,KAAK,IAAIR,IAAI,CAACS,KAAL,GAAaT,IAAI,CAACU,GAA7D,EAAkE,CAAlE;AAHP,WAAP;AAKH,SAND,MAMO;AACH,iBAAO,EACH,GAAGhB,KADA;AAEHC,YAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBK,IAArB;AAFR,WAAP;AAIH;AACJ;;AACD,SAAKR,WAAW,CAACmB,gBAAjB;AAAmC;AAC/B,cAAMhB,SAAS,GAAGD,KAAK,CAACC,SAAN,CAAgBiB,MAAhB,CAAuBR,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcR,MAAM,CAACI,OAAjD,CAAlB;AACA,eAAO,EACH,GAAGP,KADA;AAEHC,UAAAA,SAAS,EAAEA,SAFR;AAGHC,UAAAA,QAAQ,EAAED,SAAS,CAACY,MAAV,CAAiB,CAACC,KAAD,EAAQR,IAAR,KAAiBQ,KAAK,IAAIR,IAAI,CAACS,KAAL,GAAaT,IAAI,CAACU,GAA7D,EAAkE,CAAlE;AAHP,SAAP;AAKH;;AACD,SAAKlB,WAAW,CAACqB,UAAjB;AACI,aAAO,EACH,GAAGnB,KADA;AAEHC,QAAAA,SAAS,EAAE,EAFR;AAGHC,QAAAA,QAAQ,EAAE;AAHP,OAAP;;AAKJ;AACI,aAAOF,KAAP;AAjCR;AAoCH,CArCM","sourcesContent":["import * as actionTypes from '../constants/cartConstants';\n\nexport const cartReducer = (state = { cartItems: [], subTotal: 0 }, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_TO_CART: {\n            const item = action.payload;\n            const existItem = state.cartItems.find(x => x.product === item.product);\n            const cartItems = state.cartItems.map(x => x.product === existItem.product ? item : x);\n            if (existItem) {\n                return {\n                    ...state,\n                    cartItems: cartItems,\n                    subTotal: cartItems.reduce((total, item) => total += item.price * item.qty, 0)\n                }\n            } else {\n                return {\n                    ...state,\n                    cartItems: [...state.cartItems, item]\n                }\n            }\n        }\n        case actionTypes.REMOVE_FROM_CART: {\n            const cartItems = state.cartItems.filter(x => x.product !== action.payload);\n            return {\n                ...state,\n                cartItems: cartItems,\n                subTotal: cartItems.reduce((total, item) => total += item.price * item.qty, 0)\n            }\n        }\n        case actionTypes.CART_RESET:\n            return {\n                ...state,\n                cartItems: [],\n                subTotal: 0\n            }\n        default:\n            return state;\n\n    }\n}"]},"metadata":{},"sourceType":"module"}